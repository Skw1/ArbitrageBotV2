const express = require('express');
const WebSocket = require('ws');
const axios = require('axios');
const multer = require('multer');
const path = require('path');
const zlib = require('zlib'); // –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ —Å–∂–∞—Ç—ã

const PORT = 3000;
const app = express();

app.use('/', require('./src/routes/settings'))
app.use(express.static(path.join(__dirname, 'public')));

const storage = multer.diskStorage({
    destination: (req, file, cb) => cb(null, 'uploads/'),
    filename: (req, file, cb) => cb(null, file.originalname)
});
const upload = multer({ storage });

let userQuantity;
let userSpread;
let arbitrageType;
let lastComparisonTime = 0;

// platforms/platform`s symbols
let symbol1
let symbol2
let platform1
let platform2

app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.get("/settings", (req,res) => {
    res.sendFile(path.join(__dirname , "public","settings.html"))
})

app.post('/sendingInfo', upload.none(), async (req, res) => {

    userQuantity = req.body.userQuantity;
    userSpread = req.body.userSpread;
    arbitrageType = req.body.arbitrageType;
    symbol1 = req.body.symbol1
    symbol2 = req.body.symbol2
    platform1 = req.body.platform1
    platform2 = req.body.platform2
    
    switch (arbitrageType) {
        case 'Spot':
            
            switch (platform1) {
                
            }

            switch (platform2) {
                
            }

            break;
        case 'Futures':
            
            switch (platform1) {
                
            }

            switch (platform2) {
                
            }
            break;
    }


});


async function isMEXCSymbolAvailable(symbol) {
    try {
        const res = await axios.get("https://contract.mexc.com/api/v1/contract/detail");
        return res.data.data.some(contract => contract.symbol === symbol);
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ MEXC:", e.message);
        return false;
    }
}

async function getMEXCFuturesOrderBook() {
    try {
        const endpoint = `https://contract.mexc.com/api/v1/contract/depth/${mexcFuturesSymbol}`;
        const res = await axios.get(endpoint);
        const data = res.data?.data;

        if (data && Array.isArray(data.bids) && Array.isArray(data.asks)) {
            mexcOrderBook = {
                bids: data.bids,
                asks: data.asks,
                timestamp: Date.now()
            };
            comparePrices();
        } else {
            console.error('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç MEXC:', res.data);
        }
    } catch (err) {
        console.error("‚ùå MEXC futures error:", err.message);
    }
}

function connectLBankFutures() {
    const ws = new WebSocket('wss://www.lbkex.net/ws/V2/');

    ws.on('open', () => {
        const subscribeMsg = {
            action: "subscribe",
            subscribe: "depth",
            pair: lbankFuturesSymbol.toLowerCase(),
            depth: "60",
            binary: true
        };
        ws.send(JSON.stringify(subscribeMsg));
    });

    ws.on('message', (data) => {
        // –ï—Å–ª–∏ –±–∏–Ω–∞—Ä—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Å–∂–∞—Ç, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å
        if (Buffer.isBuffer(data)) {
            try {
                const decompressed = zlib.gunzipSync(data).toString('utf-8');
                parseLBankMessage(decompressed);
            } catch (e) {
                try {
                    // –µ—Å–ª–∏ –Ω–µ gzip, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                    const fallback = data.toString('utf-8');
                    parseLBankMessage(fallback);
                } catch (e2) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö LBank:', e2.message);
                }
            }
        } else if (typeof data === 'string') {
            parseLBankMessage(data);
        } else {
            console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç LBank:', data);
        }
    });

    ws.on('error', (err) => {
        console.error("‚ùå WebSocket –æ—à–∏–±–∫–∞:", err.message);
    });

    ws.on('close', () => {
        console.warn("‚ö†Ô∏è LBank WebSocket –∑–∞–∫—Ä—ã—Ç. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...");
        setTimeout(connectLBankFutures, 5000);
    });
}

function parseLBankMessage(rawData) {
    try {
        const message = JSON.parse(rawData);

        if (message.depth && Array.isArray(message.depth.bids) && Array.isArray(message.depth.asks)) {
            lbankOrderBook = {
                bids: message.depth.bids,
                asks: message.depth.asks,
                timestamp: Date.now()
            };
            comparePrices();
        } else if (message.ping) {
            // –æ–±—Ä–∞–±–æ—Ç–∫–∞ ping
            ws.send(JSON.stringify({ action: "pong", pong: message.ping }));
        } else {
            console.log('‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç LBank:', message);
        }
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç LBank:", e.message);
        console.error("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:", rawData);
    }
}

let spread; 

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω
function comparePrices() {
    const now = Date.now();
    if (!mexcOrderBook || !lbankOrderBook || now - lastComparisonTime < 1000) return;

    lastComparisonTime = now;

    const mexcBestBid = parseFloat(mexcOrderBook.bids[0][0]);
    const mexcBestAsk = parseFloat(mexcOrderBook.asks[0][0]);
    const lbankBestBid = parseFloat(lbankOrderBook.bids[0][0]);
    const lbankBestAsk = parseFloat(lbankOrderBook.asks[0][0]);

    console.log('\n=== üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω ===');
    console.log(`MEXC: Bid ${mexcBestBid} | Ask ${mexcBestAsk}`);
    console.log(`LBank: Bid ${lbankBestBid} | Ask ${lbankBestAsk}`);

    if (lbankBestAsk > mexcBestBid) {
        spread = ((lbankBestAsk - mexcBestBid) / mexcBestBid) * 100;
        console.log(`üî¥ –ê—Ä–±–∏—Ç—Ä–∞–∂! Spread: ${spread.toFixed(2)}%`);
        console.log('‚Üí SHORT –Ω–∞ LBank –ø–æ', lbankBestAsk);
        console.log('‚Üí LONG –Ω–∞ MEXC –ø–æ', mexcBestBid);
    }

    if (lbankBestBid < mexcBestAsk) {
        spread = ((mexcBestAsk - lbankBestBid) / lbankBestBid) * 100;
        console.log(`üü¢ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏! Spread: ${spread.toFixed(2)}%`);
        console.log('‚Üí BUY –Ω–∞ LBank –ø–æ', lbankBestBid);
        console.log('‚Üí SELL –Ω–∞ MEXC –ø–æ', mexcBestAsk);
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
function createOrder(){
    if(spread == userSpread || spread > 2){
      console.log(spread);
      console.log('‚Üí SHORT –Ω–∞ LBank –ø–æ', lbankBestAsk);
      console.log('‚Üí LONG –Ω–∞ MEXC –ø–æ', mexcBestBid); 

    }
    else if(spread == userSpread || spread < 2 ){
        console.log('‚Üí BUY –Ω–∞ LBank –ø–æ', lbankBestBid);
        console.log('‚Üí SELL –Ω–∞ MEXC –ø–æ', mexcBestAsk);
    }
    else{
        console.log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤');
    }


}

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
