// Create Orders 

// Limit order 1x
// Order Example for MEXC
/*
const ccxt = require('ccxt');

// üîê –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ API –∫–ª—é—á–∏ –æ—Ç MEXC Futures
const apiKey = 'ApiKey';
const secret = 'SecretKey';

const exchange = new ccxt.mexc({
    apiKey,
    secret,
    enableRateLimit: true,
    options: {
        defaultType: 'swap', // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
    },
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
async function checkBalance(symbol, amountInUSDT) {
    try {
        const balance = await exchange.fetchBalance();
        const freeBalance = balance.total.USDT;

        if (freeBalance < amountInUSDT) {
            console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: ${freeBalance.toFixed(2)} USDT`);
            return false;
        } else {
            console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: ${freeBalance.toFixed(2)} USDT`);
            return true;
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err.message);
        return false;
    }
}

// ‚úÖ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ —Å—Ç–∞–∫–∞–Ω—É
async function openLimitPosition(symbol, side, amount) {
    const baseCurrency = symbol.split('/')[0];
    const quoteCurrency = symbol.split('/')[1];

    try {
        const orderbook = await exchange.fetchOrderBook(symbol);
        const bookSide = side === 'buy' ? orderbook.asks : orderbook.bids;

        let remainingAmount = amount;
        let totalCost = 0;
        const orders = [];

        for (let i = 0; i < bookSide.length && remainingAmount > 0; i++) {
            const [priceStr, quantityStr] = bookSide[i];
            const price = parseFloat(priceStr);
            const available = parseFloat(quantityStr);

            const volumeToBuy = Math.min(remainingAmount, available);
            const cost = volumeToBuy * price;

            const hasBalance = await checkBalance(symbol, cost);
            if (!hasBalance) break;

            const params = {
                positionSide: side === 'buy' ? 'long' : 'short',
                leverage: 1,
            };

            const order = await exchange.createOrder(
                symbol,
                'limit',
                side,
                volumeToBuy,
                price,
                params
            );

            console.log(`‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä: ${volumeToBuy} ${baseCurrency} –ø–æ ${price}`);
            orders.push(order);

            remainingAmount -= volumeToBuy;
            totalCost += cost;
        }

        if (remainingAmount > 0) {
            console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏. –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: ${remainingAmount.toFixed(6)} ${baseCurrency}`);
        } else {
            console.log(`üéØ –í—Å–µ ${amount} ${baseCurrency} —Ä–∞–∑–º–µ—â–µ–Ω—ã –ª–∏–º–∏—Ç–∞–º–∏. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost.toFixed(2)} ${quoteCurrency}`);
        }

        return orders;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', err.message);
    }
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
async function getOpenOrders(symbol) {
    try {
        const orders = await exchange.fetchOpenOrders(symbol);
        console.log(`üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è ${symbol}:`);
        console.dir(orders, { depth: null });
        return orders;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', err.message);
    }
}

// ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –º–∞—Ä–∫–µ—Ç—É
async function closePosition(symbol, side, amount) {
    try {
        const oppositeSide = side === 'buy' ? 'sell' : 'buy';
        const baseCurrency = symbol.split('/')[0];

        const params = {
            positionSide: side === 'buy' ? 'long' : 'short',
        };

        const order = await exchange.createOrder(
            symbol,
            'market',
            oppositeSide,
            amount,
            null,
            params
        );

        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–æ–º: ${amount} ${baseCurrency}`);
        return order;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏:', err.message);
    }
}

// üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const symbol = 'BTC/USDT'; // –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    const amount = 0.01;       // –ö–æ–ª-–≤–æ BTC

    await openLimitPosition(symbol, 'buy', amount);  // –û—Ç–∫—Ä—ã—Ç—å long –ø–æ —Å—Ç–∞–∫–∞–Ω—É —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
    await getOpenOrders(symbol);                     // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
    // await closePosition(symbol, 'buy', amount);   // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –º–∞—Ä–∫–µ—Ç—É
}

main();
*/