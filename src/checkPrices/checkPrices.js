const openMarketMEXC = require('../orders/mexc/openMarket.js');
const openMarketLBank = require('../orders/lbank/openMarket.js');
const openMarketKuCoin = require('../orders/kucoin/openMarket.js');
const closeMarketMEXC = require('../orders/mexc/closeMarket.js');
const closeMarketLBank = require('../orders/lbank/closeMarket.js');
const closeMarketKuCoin = require('../orders/kucoin/closeMarket.js');

module.exports = async function checkPrices({ 
    platform1, platform2, 
    marketPrice1, marketPrice2, 
    userSpread,
    arbitrageType,
    orderType,
    symbol,
    amount,
}) {
    let result = '';
    try {
        result += `üìà Arbitrage Type: ${arbitrageType.toUpperCase()}</br> </br>Order Type: ${orderType.toUpperCase()}\n</br>`;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞
        function calculateProfit(mp1Ask, mp1Bid, mp2Ask, mp2Bid) {
            let profit1 = (mp2Bid - mp1Ask) / mp1Ask * 100;
            let profit2 = (mp1Bid - mp2Ask) / mp2Ask * 100;
            return { profit1, profit2 };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä
        if (orderType.toLowerCase() === 'market') {
            console.log('–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω...');

            const intervalId = setInterval(async () => {
                console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω...');

                if (!marketPrice1 || !marketPrice2 || !marketPrice1.bestAskPrice || !marketPrice2.bestAskPrice) {
                    console.error('Market data missing or incomplete:', marketPrice1, marketPrice2);
                    result += '‚ùå –†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n</br>';
                    clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    return;
                }

                const mp1Ask = parseFloat(marketPrice1.bestAskPrice);
                const mp1Bid = parseFloat(marketPrice1.bestBidPrice);
                const mp2Ask = parseFloat(marketPrice2.bestAskPrice);
                const mp2Bid = parseFloat(marketPrice2.bestBidPrice);

                result += `</br>üîç –†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:\n</br>`;
                result += `${platform1}: Ask ${mp1Ask}, Bid ${mp1Bid}\n</br>`;
                result += `${platform2}: Ask ${mp2Ask}, Bid ${mp2Bid}\n</br>`;

                // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞
                const { profit1, profit2 } = calculateProfit(mp1Ask, mp1Bid, mp2Ask, mp2Bid);

                if (profit1 >= userSpread) {
                    result += `</br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${mp1Ask}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${mp2Bid},\n</br> </br>–ü—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%\n`;
                    await openMarketMEXC(symbol, 'buy', amount);
                    await openMarketKuCoin(symbol, 'sell', amount);
                    clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                } else if (profit2 >= userSpread) {
                    result += `</br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${mp2Ask}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${mp1Bid},\n</br> </br>–ü—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%\n`;
                    await openMarketLBank(symbol, 'buy', amount);
                    await openMarketKuCoin(symbol, 'sell', amount);
                    clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                } else {
                    result += `</br>‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞.\n</br> –ü—Ä–æ—Ñ–∏—Ç –º–∞–∫—Å: ${Math.max(profit1, profit2).toFixed(2)}%\n`;
                }
            }, 5000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

        } else {
            result += '</br>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞\n</br>';
            return result;
        }

    } catch (err) {
        result += `</br>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: </br>${err.message}\n`;
    }

    return result;
}


// Prices
// Order Book Prices 
// –ë—ã–ª–æ
/*
module.exports = async function checkPrices({ 
    platform1, platform2, 
    orderBook1, orderBook2, 
    userSpread,
    arbitrageType
}) {
    let result = '';
    try {
        if (!orderBook1 || !orderBook2) {
            result += '‚ùå –û—Ä–¥–µ—Ä–±—É–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n</br>';
            return result;
        }
        
        result += üìà Arbitrage Type: ${arbitrageType.toUpperCase()}\n</br>;

        const bestAsk1 = parseFloat(orderBook1.asks[0][0]);
        const bestBid1 = parseFloat(orderBook1.bids[0][0]);
        const bestAsk2 = parseFloat(orderBook2.asks[0][0]);
        const bestBid2 = parseFloat(orderBook2.bids[0][0]);

        result += </br>üîç –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏:\n </br>;
        result += ${platform1}: Ask ${bestAsk1} / Bid ${bestBid1}\n</br>;
        result += ${platform2}: Ask ${bestAsk2} / Bid ${bestBid2}\n</br>;

        let profit1, profit2;

        if (arbitrageType.toLowerCase() === 'spot') {
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else if (arbitrageType.toLowerCase() === 'futures') {
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else {
            result += '</br>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n';
            return result;
        }

        if (profit1 >= userSpread) {
            result += </br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: </br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestAsk1}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestBid2},</br> </br> –ü—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%\n;
        } 
        else if (profit2 >= userSpread) {
            result += </br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: </br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestAsk2}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestBid1},</br> </br> –ü—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%\n;
        } 
        else {
            result += </br>‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞. </br> –ü—Ä–æ—Ñ–∏—Ç –º–∞–∫—Å: ${Math.max(profit1, profit2).toFixed(2)}%\n;
        }
    } catch (err) {
        result += </br>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: </br> ${err.message}\n;
    }
    return result;
}

*/
