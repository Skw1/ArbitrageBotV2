// Prices
// Order Book Prices 
module.exports = async function checkPrices({ 
    platform1, platform2, 
    orderBook1, orderBook2, 
    marketPrice1, marketPrice2, 
    userSpread,
    arbitrageType,
    orderType, // 'Limit' –∞–±–æ 'Market'
}) {
    let result = '';
    try {
        result += `üìà Arbitrage Type: ${arbitrageType.toUpperCase()} </br> Order Type: ${orderType.toUpperCase()}\n</br>`;

        // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        if (orderType.toLowerCase() === 'limit') {
            result += `‚ö†Ô∏è –°–µ–π—á–∞—Å –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n</br>`;
            return result;
        }

        let priceBuy1, priceSell1, priceBuy2, priceSell2;

        if (orderType.toLowerCase() === 'market') {
            if (!marketPrice1 || !marketPrice2 || !marketPrice1.lastPrice || !marketPrice2.lastPrice) {
                result += '‚ùå –†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n</br>';
                return result;
            }

            const mp1 = parseFloat(marketPrice1.lastPrice);
            const mp2 = parseFloat(marketPrice2.lastPrice);

            result += `üîç –†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:\n</br>`;
            result += `${platform1}: ${mp1}\n</br>`;
            result += `${platform2}: ${mp2}\n</br>`;

            priceBuy1 = mp1;
            priceSell1 = mp1;
            priceBuy2 = mp2;
            priceSell2 = mp2;
        } 
        else {
            result += '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞\n</br>';
            return result;
        }

        // Profit calculation
        const profit1 = (priceSell2 - priceBuy1) / priceBuy1 * 100;
        const profit2 = (priceSell1 - priceBuy2) / priceBuy2 * 100;

        if (profit1 >= userSpread) {
            result += `‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${priceBuy1}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${priceSell2},\n</br> –ü—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%\n`;
        } 
        else if (profit2 >= userSpread) {
            result += `‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${priceBuy2}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${priceSell1},\n</br> –ü—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%\n`;
        } 
        else {
            result += `‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞.\n</br> –ü—Ä–æ—Ñ–∏—Ç –º–∞–∫—Å: ${Math.max(profit1, profit2).toFixed(2)}%\n`;
        }

    } catch (err) {
        result += `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: </br>${err.message}\n`;
    }

    return result;
}



// Market Prices