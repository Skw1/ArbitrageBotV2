module.exports = async function checkPrices({ 
    platform1, platform2, 
    orderBook1, orderBook2, 
    marketPrice1, marketPrice2, 
    userSpread,
    arbitrageType,
    orderType, // 'Limit' –∞–±–æ 'Market'
}) {
    let result = '';
    try {
        result += `üìà Arbitrage Type: ${arbitrageType.toUpperCase()} </br> </br>Order Type: ${orderType.toUpperCase()}\n</br>`;

        // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        if (orderType.toLowerCase() === 'limit') {
            result += `‚ö†Ô∏è –°–µ–π—á–∞—Å –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n</br>`;
            return result;
        }

        let priceBuy1, priceSell1, priceBuy2, priceSell2;

        if (orderType.toLowerCase() === 'market') {
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω
            console.log('Market Price 1:', marketPrice1);
            console.log('Market Price 2:', marketPrice2);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç bestAskPrice –∏ bestBidPrice
            if (!marketPrice1 || !marketPrice2 || !marketPrice1.bestAskPrice || !marketPrice2.bestAskPrice) {
                console.error('Market data missing or incomplete:', marketPrice1, marketPrice2);
                result += '‚ùå –†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n</br>';
                return result;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞
            const mp1Ask = parseFloat(marketPrice1.bestAskPrice);
            const mp1Bid = parseFloat(marketPrice1.bestBidPrice);
            const mp2Ask = parseFloat(marketPrice2.bestAskPrice);
            const mp2Bid = parseFloat(marketPrice2.bestBidPrice);

            result += `</br>üîç –†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:\n</br>`;
            result += `${platform1}: Ask ${mp1Ask}, Bid ${mp1Bid}\n</br>`;
            result += `${platform2}: Ask ${mp2Ask}, Bid ${mp2Bid}\n</br>`;

            priceBuy1 = mp1Bid;
            priceSell1 = mp1Ask;

            priceBuy2 = mp2Bid;
            priceSell2 = mp2Ask;
        } 
        else if (orderType.toLowerCase() === 'orderbook') {
            if (!orderBook1 || !orderBook2) {
                result += '</br>‚ùå –û—Ä–¥–µ—Ä–±—É–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n</br>';
                return result;
            }

            const bestAsk1 = parseFloat(orderBook1.asks[0][0]);
            const bestBid1 = parseFloat(orderBook1.bids[0][0]);
            const bestAsk2 = parseFloat(orderBook2.asks[0][0]);
            const bestBid2 = parseFloat(orderBook2.bids[0][0]);

            result += `</br>üîç –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏:\n</br>`;
            result += `${platform1}: Ask ${bestAsk1} / Bid ${bestBid1}\n</br>`;
            result += `${platform2}: Ask ${bestAsk2} / Bid ${bestBid2}\n</br>`;

            priceBuy1 = bestBid1;
            priceSell1 = bestAsk1;
            priceBuy2 = bestBid2;
            priceSell2 = bestAsk2;
        } 
        else {
            result += '</br>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞\n</br>';
            return result;
        }

        // Profit calculation
        let profit1, profit2;

        if (arbitrageType.toLowerCase() === 'spot') {
            profit1 = (priceSell2 - priceBuy1) / priceBuy1 * 100;
            profit2 = (priceSell1 - priceBuy2) / priceBuy2 * 100;
        } 
        else if (arbitrageType.toLowerCase() === 'futures') {
            profit1 = (priceSell2 - priceBuy1) / priceBuy1 * 100;
            profit2 = (priceSell1 - priceBuy2) / priceBuy2 * 100;
        } 
        else {
            result += '</br>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n';
            return result;
        }

        // –û—Ü–µ–Ω–∫–∞ —Å–ø—Ä–µ–¥–∞ –∏ –≤—ã–≤–æ–¥
        if (profit1 >= userSpread) {
            result += `</br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${priceBuy1}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${priceSell2},\n</br> </br>–ü—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%\n`;
            //result += `üî¥ –¶–µ–Ω—ã:\n</br> ${platform1} - –ü–æ–∫—É–ø–∫–∞: ${priceBuy1}, –ü—Ä–æ–¥–∞–∂–∞: ${priceSell1}\n</br>`;
            //result += `üî¥ ${platform2} - –ü–æ–∫—É–ø–∫–∞: ${priceBuy2}, –ü—Ä–æ–¥–∞–∂–∞: ${priceSell2}\n</br>`;
        } 
        else if (profit2 >= userSpread) {
            result += `</br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${priceBuy2}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${priceSell1},\n</br> </br>–ü—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%\n`;
            //result += `üî¥ –¶–µ–Ω—ã:\n</br> ${platform1} - –ü–æ–∫—É–ø–∫–∞: ${priceBuy1}, –ü—Ä–æ–¥–∞–∂–∞: ${priceSell1}\n</br>`;
            //result += `üî¥ ${platform2} - –ü–æ–∫—É–ø–∫–∞: ${priceBuy2}, –ü—Ä–æ–¥–∞–∂–∞: ${priceSell2}\n</br>`;
        } 
        else {
            result += `</br>‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞.\n</br> –ü—Ä–æ—Ñ–∏—Ç –º–∞–∫—Å: ${Math.max(profit1, profit2).toFixed(2)}%\n`;
            //result += `üî¥ –¶–µ–Ω—ã:\n</br> ${platform1} - –ü–æ–∫—É–ø–∫–∞: ${priceBuy1}, –ü—Ä–æ–¥–∞–∂–∞: ${priceSell1}\n</br>`;
            //result += `üî¥ ${platform2} - –ü–æ–∫—É–ø–∫–∞: ${priceBuy2}, –ü—Ä–æ–¥–∞–∂–∞: ${priceSell2}\n</br>`;
        }

    } catch (err) {
        result += `</br>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: </br>${err.message}\n`;
    }

    return result;
}


// Prices
// Order Book Prices 
// –ë—ã–ª–æ
/*
module.exports = async function checkPrices({ 
    platform1, platform2, 
    orderBook1, orderBook2, 
    userSpread,
    arbitrageType
}) {
    let result = '';
    try {
        if (!orderBook1 || !orderBook2) {
            result += '‚ùå –û—Ä–¥–µ—Ä–±—É–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n</br>';
            return result;
        }
        
        result += üìà Arbitrage Type: ${arbitrageType.toUpperCase()}\n</br>;

        const bestAsk1 = parseFloat(orderBook1.asks[0][0]);
        const bestBid1 = parseFloat(orderBook1.bids[0][0]);
        const bestAsk2 = parseFloat(orderBook2.asks[0][0]);
        const bestBid2 = parseFloat(orderBook2.bids[0][0]);

        result += </br>üîç –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏:\n </br>;
        result += ${platform1}: Ask ${bestAsk1} / Bid ${bestBid1}\n</br>;
        result += ${platform2}: Ask ${bestAsk2} / Bid ${bestBid2}\n</br>;

        let profit1, profit2;

        if (arbitrageType.toLowerCase() === 'spot') {
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else if (arbitrageType.toLowerCase() === 'futures') {
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else {
            result += '</br>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n';
            return result;
        }

        if (profit1 >= userSpread) {
            result += </br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: </br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestAsk1}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestBid2},</br> </br> –ü—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%\n;
        } 
        else if (profit2 >= userSpread) {
            result += </br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: </br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestAsk2}, </br> –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestBid1},</br> </br> –ü—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%\n;
        } 
        else {
            result += </br>‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞. </br> –ü—Ä–æ—Ñ–∏—Ç –º–∞–∫—Å: ${Math.max(profit1, profit2).toFixed(2)}%\n;
        }
    } catch (err) {
        result += </br>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: </br> ${err.message}\n;
    }
    return result;
}

*/
