// Prices

// Example from ChatGPT -> we need to check and fix 

module.exports = async function checkPrices({ 
    platform1, platform2, 
    orderBook1, orderBook2, 
    userSpread,
    arbitrageType
}) {
    try {
        if (!orderBook1 || !orderBook2) {
            console.error('‚ùå –û—Ä–¥–µ—Ä–±—É–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –∫–∞–∫–æ–º —Ç–∏–ø–µ —Ä–∞–±–æ—Ç–∞–µ–º
        console.log(`=== üìà Arbitrage Type: ${arbitrageType.toUpperCase()} ===`);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã:
        const bestAsk1 = parseFloat(orderBook1.asks[0][0]);
        const bestBid1 = parseFloat(orderBook1.bids[0][0]);
        const bestAsk2 = parseFloat(orderBook2.asks[0][0]);
        const bestBid2 = parseFloat(orderBook2.bids[0][0]);

        console.log(`=== üîç –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ ===`);
        console.log(`${platform1}: Ask ${bestAsk1} / Bid ${bestBid1}`);
        console.log(`${platform2}: Ask ${bestAsk2} / Bid ${bestBid2}`);

        // –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:
        let profit1, profit2;

        if (arbitrageType.toLowerCase() === 'spot') {
            // –°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ (–ø—Ä–æ—Å—Ç–∞—è –ø–æ–∫—É–ø–∫–∞-–ø—Ä–æ–¥–∞–∂–∞)
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else if (arbitrageType.toLowerCase() === 'futures') {
            // –§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ (—Ä–∞–∑–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: —á–∞—Å—Ç–æ Long/Short, –Ω–æ —É–ø—Ä–æ—Å—Ç–∏–º –ø–æ–∫–∞)
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
        if (profit1 >= userSpread) {
            console.log(`‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestAsk1}, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestBid2}, –ø—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%`);
        } 
        else if (profit2 >= userSpread) {
            console.log(`‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestAsk2}, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestBid1}, –ø—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%`);
        } 
        else {
            console.log(`‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞. –ü—Ä–æ—Ñ–∏—Ç –º–∞–∫—Å: ${Math.max(profit1, profit2).toFixed(2)}%`);
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω:', err.message);
    }
}
