// Prices

// Example from ChatGPT -> we need to check and fix 
module.exports = async function checkPrices({ 
    platform1, platform2, 
    orderBook1, orderBook2, 
    userSpread,
    arbitrageType
}) {
    let result = '';
    try {
        if (!orderBook1 || !orderBook2) {
            result += '‚ùå –û—Ä–¥–µ—Ä–±—É–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n';
            return result;
        }
        result += 'works\n'; // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result += `üìà Arbitrage Type: ${arbitrageType.toUpperCase()}\n`;

        const bestAsk1 = parseFloat(orderBook1.asks[0][0]);
        const bestBid1 = parseFloat(orderBook1.bids[0][0]);
        const bestAsk2 = parseFloat(orderBook2.asks[0][0]);
        const bestBid2 = parseFloat(orderBook2.bids[0][0]);

        result += `üîç –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏\n`;
        result += `${platform1}: Ask ${bestAsk1} / Bid ${bestBid1}\n`;
        result += `${platform2}: Ask ${bestAsk2} / Bid ${bestBid2}\n`;

        let profit1, profit2;

        if (arbitrageType.toLowerCase() === 'spot') {
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else if (arbitrageType.toLowerCase() === 'futures') {
            profit1 = (bestBid2 - bestAsk1) / bestAsk1 * 100;
            profit2 = (bestBid1 - bestAsk2) / bestAsk2 * 100;
        } 
        else {
            result += '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n';
            return result;
        }

        if (profit1 >= userSpread) {
            result += `‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestAsk1}, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestBid2}, –ø—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%\n`;
        } 
        else if (profit2 >= userSpread) {
            result += `‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${bestAsk2}, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${bestBid1}, –ø—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%\n`;
        } 
        else {
            result += `‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞. –ü—Ä–æ—Ñ–∏—Ç –º–∞–∫—Å: ${Math.max(profit1, profit2).toFixed(2)}%\n`;
        }
    } catch (err) {
        result += `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: ${err.message}\n`;
    }
    return result;
}

//====================================================================//
/*
let spread; 

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω
function comparePrices() {
    const now = Date.now();
    if (!mexcOrderBook || !lbankOrderBook || now - lastComparisonTime < 1000) return;

    lastComparisonTime = now;

    const mexcBestBid = parseFloat(mexcOrderBook.bids[0][0]);
    const mexcBestAsk = parseFloat(mexcOrderBook.asks[0][0]);
    const lbankBestBid = parseFloat(lbankOrderBook.bids[0][0]);
    const lbankBestAsk = parseFloat(lbankOrderBook.asks[0][0]);

    console.log('\n=== üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω ===');
    console.log(`MEXC: Bid ${mexcBestBid} | Ask ${mexcBestAsk}`);
    console.log(`LBank: Bid ${lbankBestBid} | Ask ${lbankBestAsk}`);

    if (lbankBestAsk > mexcBestBid) {
        spread = ((lbankBestAsk - mexcBestBid) / mexcBestBid) * 100;
        console.log(`üî¥ –ê—Ä–±–∏—Ç—Ä–∞–∂! Spread: ${spread.toFixed(2)}%`);
        console.log('‚Üí SHORT –Ω–∞ LBank –ø–æ', lbankBestAsk);
        console.log('‚Üí LONG –Ω–∞ MEXC –ø–æ', mexcBestBid);
    }

    if (lbankBestBid < mexcBestAsk) {
        spread = ((mexcBestAsk - lbankBestBid) / lbankBestBid) * 100;
        console.log(`üü¢ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏! Spread: ${spread.toFixed(2)}%`);
        console.log('‚Üí BUY –Ω–∞ LBank –ø–æ', lbankBestBid);
        console.log('‚Üí SELL –Ω–∞ MEXC –ø–æ', mexcBestAsk);
    }
}
    */