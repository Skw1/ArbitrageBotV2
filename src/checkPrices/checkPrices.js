// Check Prices

// Parsing Prices Functions
const getMexcFuturesPrice = require('../market/mexc.js');
const getLBankFuturesPrice = require('../market/lbank.js');
const getKucoinFuturesPrice = require('../market/kucoin.js');
const getBitunixFuturesPrice = require('../market/bitunix.js');
const getBinanceFuturesPrice = require('../market/binance.js');
const getBybitFuturesPrice = require('../market/bybit.js');

// Open Market Order Functions
const openMarketMEXC = require('../orders/mexc/openMarket.js');
const openMarketLBank = require('../orders/lbank/openMarket.js');
const openMarketKuCoin = require('../orders/kucoin/openMarket.js');
const openMarketBitunix = require('../orders/bitunix/openMarket.js');
const openMarketBinance = require('../orders/binance/openMarket.js');

// Close Market Order Functions
const closeMarketMEXC = require('../orders/mexc/closeMarket.js');
const closeMarketLBank = require('../orders/lbank/closeMarket.js');
const closeMarketKuCoin = require('../orders/kucoin/closeMarket.js');
const closeMarketBitunix = require('../orders/bitunix/closeMarket.js');
const closeMarketBinance = require('../orders/binance/closeMarket.js');



module.exports = function checkPrices({
  platform1, platform2,
  marketPrice1, marketPrice2,
  arbitrageType,
  userSpread,
  orderType,
  symbol1,
  symbol2,
  amount,
}) {
  userSpread = (userSpread == null || isNaN(userSpread)) ? 2 : userSpread;
  let result = '';

  return new Promise((resolve) => {
    if (orderType.toLowerCase() !== 'market') {
      console.log('‚ö†Ô∏è –¢–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.');
      result += `‚ö†Ô∏è –¢–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.`;
      return resolve(result);
    }

    console.log(`üìà Arbitrage Type: ${arbitrageType.toUpperCase()}`);
    console.log(`Order Type: ${orderType.toUpperCase()}\n`);
    result +=`üìà Arbitrage Type: ${arbitrageType.toUpperCase()}<br><br>Order Type: ${orderType.toUpperCase()}<br>`;

    function calculateProfit(mp1Ask, mp1Bid, mp2Ask, mp2Bid) {
      const profit1 = (mp2Bid - mp1Ask) / mp1Ask * 100;
      const profit2 = (mp1Bid - mp2Ask) / mp2Ask * 100;
      return { profit1, profit2 };
    }

    async function openOrder(platform, symbol, action, amount) {
      const map = {
        MEXC: openMarketMEXC,
        LBANK: openMarketLBank,
        KUCOIN: openMarketKuCoin,
        BITUNIX: openMarketBitunix,
        BINANCE: openMarketBinance,
      };
      return map[platform]?.(symbol, action, amount);
    }

    async function closeOrder(platform, symbol, action, amount) {
      const map = {
        MEXC: closeMarketMEXC,
        LBANK: closeMarketLBank,
        KUCOIN: closeMarketKuCoin,
        BITUNIX: closeMarketBitunix,
        BINANCE: closeMarketBinance,
      };
      return map[platform]?.(symbol, action, amount);
    }

    console.log('‚è± –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞...\n');
    result += `‚è± –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞... <br>`;

    const intervalId = setInterval(async () => {
      try {
        if (!marketPrice1?.bestAskPrice || !marketPrice2?.bestAskPrice) {
          console.error('‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', marketPrice1, marketPrice2);
          result +=`‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã<br>`;
          clearInterval(intervalId);
          return resolve(result);
        }

        const mp1Ask = parseFloat(marketPrice1.bestAskPrice);
        const mp1Bid = parseFloat(marketPrice1.bestBidPrice);
        const mp2Ask = parseFloat(marketPrice2.bestAskPrice);
        const mp2Bid = parseFloat(marketPrice2.bestBidPrice);

        const { profit1, profit2 } = calculateProfit(mp1Ask, mp1Bid, mp2Ask, mp2Bid);

        console.log(`üîç –°–ø—Ä–µ–¥ ${platform1} ‚Üí ${platform2}: ${profit1.toFixed(4)}%`);
        console.log(`üîç –°–ø—Ä–µ–¥ ${platform2} ‚Üí ${platform1}: ${profit2.toFixed(4)}%\n`);
        result += `üîç –°–ø—Ä–µ–¥ ${platform1} ‚Üí ${platform2}: ${profit1.toFixed(4)}% <br>`;
        result += `üîç –°–ø—Ä–µ–¥ ${platform2} ‚Üí ${platform1}: ${profit2.toFixed(4)}%<br>`;

        if (profit1 >= userSpread) {
          console.log(`‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω! –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ ${platform1} –ø–æ ${mp1Ask}, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ ${platform2} –ø–æ ${mp2Bid}`);
          result += `‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω! –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ ${platform1} –ø–æ ${mp1Ask}, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ ${platform2} –ø–æ ${mp2Bid}<br>`;
          await openOrder(platform1, symbol1, 'buy', amount);
          await openOrder(platform2, symbol2, 'sell', amount);
          clearInterval(intervalId);

          monitorClose(
            () => parseFloat(marketPrice1.bestAskPrice) >= parseFloat(marketPrice2.bestBidPrice),
            async () => {
              await closeOrder(platform1, symbol1, 'sell', amount);
              await closeOrder(platform2, symbol2, 'buy', amount);
              console.log('‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã. –°–ø—Ä–µ–¥ –≤—ã—Ä–æ–≤–Ω—è–ª—Å—è.');
              result += `‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã. –°–ø—Ä–µ–¥ –≤—ã—Ä–æ–≤–Ω—è–ª—Å—è.<br>`;
              resolve(result);
            }
          );
        } else if (profit2 >= userSpread) {
          console.log(`‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω! –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ ${platform2} –ø–æ ${mp2Ask}, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ ${platform1} –ø–æ ${mp1Bid}`);
          result += `‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω! –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ ${platform2} –ø–æ ${mp2Ask}, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ ${platform1} –ø–æ ${mp1Bid}<br>`;
          await openOrder(platform2, symbol2, 'buy', amount);
          await openOrder(platform1, symbol1, 'sell', amount);
          clearInterval(intervalId);

          monitorClose(
            () => parseFloat(marketPrice1.bestBidPrice) <= parseFloat(marketPrice2.bestAskPrice),
            async () => {
              await closeOrder(platform1, symbol1, 'buy', amount);
              await closeOrder(platform2, symbol2, 'sell', amount);
              console.log('‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã. –°–ø—Ä–µ–¥ –≤—ã—Ä–æ–≤–Ω—è–ª—Å—è.');
              result += `‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã. –°–ø—Ä–µ–¥ –≤—ã—Ä–æ–≤–Ω—è–ª—Å—è.<br>`;
              resolve(result);
            }
          );
        } else {
          console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–ø—Ä–µ–¥: –º–∞–∫—Å–∏–º—É–º ${Math.max(profit1, profit2).toFixed(2)}%\n`);
          result += `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–ø—Ä–µ–¥: –º–∞–∫—Å–∏–º—É–º ${Math.max(profit1, profit2).toFixed(2)}%<br>`;
        }
      } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', e.message);
        result += `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${e.message}<br>`;
        clearInterval(intervalId);
        resolve(result);
      }
    }, 3000);

    function monitorClose(conditionFn, closeFn) {
      const closeInterval = setInterval(async () => {
        try {
          if (conditionFn()) {
            clearInterval(closeInterval);
            await closeFn();
          }
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ monitorClose:', e.message);
          result += `‚ùå –û—à–∏–±–∫–∞ –≤ monitorClose: ${e.message}<br>`;
          clearInterval(closeInterval);
          resolve(result);
        }
      }, 5000);
    }

    // –¢–∞–π–º–∞—É—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –≤–µ—à–∞—Ç—å Promise)
    setTimeout(() => {
      clearInterval(intervalId);
      result += `‚è≥ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–æ.<br>`;
      resolve(result);
    }, 6000);
  });
};