const openMarketMEXC = require('../orders/mexc/openMarket.js');
const openMarketLBank = require('../orders/lbank/openMarket.js');
const openMarketKuCoin = require('../orders/kucoin/openMarket.js');
const openMarketBitunix = require('../orders/bitunix/openMarket.js');
const openMarketBinance = require('../orders/binance/openMarket.js');

const closeMarketMEXC = require('../orders/mexc/closeMarket.js');
const closeMarketLBank = require('../orders/lbank/closeMarket.js');
const closeMarketKuCoin = require('../orders/kucoin/closeMarket.js');
const closeMarketBitunix = require('../orders/bitunix/closeMarket.js');
const closeMarketBinance = require('../orders/binance/closeMarket.js');

module.exports = async function checkPrices({ 
    platform1, platform2, 
    marketPrice1, marketPrice2, 
    arbitrageType,
    userSpread,
    orderType,
    symbol1,
    symbol2,
    amount,
}) {
    userSpread = (userSpread == null || isNaN(userSpread)) ? 2 : userSpread;

    let result = '';
    try {
        result += `üìà Arbitrage Type: ${arbitrageType.toUpperCase()}</br></br>Order Type: ${orderType.toUpperCase()}\n</br>`;

        function calculateProfit(mp1Ask, mp1Bid, mp2Ask, mp2Bid) {
            let profit1 = (mp2Bid - mp1Ask) / mp1Ask * 100;
            let profit2 = (mp1Bid - mp2Ask) / mp2Ask * 100;
            return { profit1, profit2 };
        }

        async function openOrder(platform, symbol, action, amount) {
            if (platform === 'MEXC') return openMarketMEXC(symbol, action, amount);
            if (platform === 'LBANK') return openMarketLBank(symbol, action, amount);
            if (platform === 'KUCOIN') return openMarketKuCoin(symbol, action, amount);
            if (platform === 'BITUNIX') return openMarketBitunix(symbol, action, amount);
            if (platform === 'BINANCE') return openMarketBinance(symbol, action, amount);
        }

        async function closeOrder(platform, symbol, action, amount) {
            if (platform === 'MEXC') return closeMarketMEXC(symbol, action, amount);
            if (platform === 'LBANK') return closeMarketLBank(symbol, action, amount);
            if (platform === 'KUCOIN') return closeMarketKuCoin(symbol, action, amount);
            if (platform === 'BITUNIX') return closeMarketBitunix(symbol, action, amount);
            if (platform === 'BINANCE') return closeMarketBinance(symbol, action, amount);
        }

        if (orderType.toLowerCase() !== 'market') {
            result += `</br>‚ö†Ô∏è –¢–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n</br>`;
            return result;
        }

        console.log('–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞...');

        const intervalId = setInterval(async () => {
            if (!marketPrice1 || !marketPrice2 || !marketPrice1.bestAskPrice || !marketPrice2.bestAskPrice) {
                console.error('Market data missing or incomplete:', marketPrice1, marketPrice2);
                result += '‚ùå –†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n</br>';
                clearInterval(intervalId);
                return;
            }

            const mp1Ask = parseFloat(marketPrice1.bestAskPrice);
            const mp1Bid = parseFloat(marketPrice1.bestBidPrice);
            const mp2Ask = parseFloat(marketPrice2.bestAskPrice);
            const mp2Bid = parseFloat(marketPrice2.bestBidPrice);

            const { profit1, profit2 } = calculateProfit(mp1Ask, mp1Bid, mp2Ask, mp2Bid);

            // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            console.log(`–¢–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: ${profit1.toFixed(4)}% (–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), ${profit2.toFixed(4)}% (–≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)`);

            // –î–æ–±–∞–≤–∏–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–∂–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ
            result += `</br>üîç –¢–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥:</br> ${platform1}‚Üí${platform2}: ${profit1.toFixed(4)}% </br> ${platform2}‚Üí${platform1}: ${profit2.toFixed(4)}% </br>`;

            if (profit1 >= userSpread) {
                result += `</br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform1} –ø–æ ${mp1Ask}, –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform2} –ø–æ ${mp2Bid}, –ü—Ä–æ—Ñ–∏—Ç: ${profit1.toFixed(2)}%\n`;
                await openOrder(platform1, symbol1, 'buy', amount);
                await openOrder(platform2, symbol2, 'sell', amount);
                clearInterval(intervalId);

                // –ñ–¥–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–æ–≤
                const closeIntervalId = setInterval(async () => {
                    const updatedMp1Ask = parseFloat(marketPrice1.bestAskPrice);
                    const updatedMp2Bid = parseFloat(marketPrice2.bestBidPrice);

                    if (updatedMp1Ask >= updatedMp2Bid) {  // –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—É—Ç—å –ø—Ä–æ—â–µ –∏–ª–∏ –∏–Ω–∞—á–µ
                        await closeOrder(platform1, symbol1, 'sell', amount);
                        await closeOrder(platform2, symbol2, 'buy', amount);
                        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã, —Å–ø—Ä–µ–¥ –≤—ã—Ä–æ–≤–Ω—è–ª—Å—è.`);
                        clearInterval(closeIntervalId);
                    }
                }, 5000);

            } else if (profit2 >= userSpread) {
                result += `</br>‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</br> –ö—É–ø–∏—Ç—å –Ω–∞ ${platform2} –ø–æ ${mp2Ask}, –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ ${platform1} –ø–æ ${mp1Bid}, –ü—Ä–æ—Ñ–∏—Ç: ${profit2.toFixed(2)}%\n`;
                await openOrder(platform2, symbol2, 'buy', amount);
                await openOrder(platform1, symbol1, 'sell', amount);
                clearInterval(intervalId);

                // –ñ–¥–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–æ–≤
                const closeIntervalId = setInterval(async () => {
                    const updatedMp2Ask = parseFloat(marketPrice2.bestAskPrice);
                    const updatedMp1Bid = parseFloat(marketPrice1.bestBidPrice);

                    if (updatedMp1Bid <= updatedMp2Ask) {
                        await closeOrder(platform1, symbol1, 'buy', amount);
                        await closeOrder(platform2, symbol2, 'sell', amount);
                        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã, —Å–ø—Ä–µ–¥ –≤—ã—Ä–æ–≤–Ω—è–ª—Å—è.`);
                        clearInterval(closeIntervalId);
                    }
                }, 5000);

            } else {
                // –°–ø—Ä–µ–¥ –Ω–µ –¥–æ—Å—Ç–∏–≥ userSpread, –∂–¥–µ–º
                result += `</br>‚ùå –°–ø—Ä–µ–¥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω. –¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º: ${Math.max(profit1, profit2).toFixed(2)}%\n`;
            }

        }, 5000);

    } catch (err) {
        result += `</br>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: </br>${err.message}\n`;
    }

    return result;
}
