// Funding

/*
const axios = require('axios');

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
const DEFAULT_FUNDING = {
    MEXC: 0.0004,
    KUCOIN: 0.0006
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ funding –¥–ª—è MEXC
async function getMEXCFunding(symbol) {
    try {
        const response = await axios.get(`https://contract.mexc.com/api/v1/private/fundingRate/${symbol}`);
        return parseFloat(response.data.data.fundingRate); // –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–∫–æ–π
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ funding MEXC:', error.message);
        return DEFAULT_FUNDING.MEXC;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ funding –¥–ª—è KuCoin
async function getKucoinFunding(symbol) {
    try {
        const response = await axios.get(`https://api-futures.kucoin.com/api/v1/funding-rate/${symbol}`);
        return parseFloat(response.data.data.fundingRate);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ funding KUCOIN:', error.message);
        return DEFAULT_FUNDING.KUCOIN;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
async function runFundingAnalysis(symbol, spread) {
    const [fundingMEXC, fundingKUCOIN] = await Promise.all([
        getMEXCFunding(symbol),
        getKucoinFunding(symbol)
    ]);

    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞
    const averageImpact = Math.abs(fundingMEXC - fundingKUCOIN);
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø—Ä–µ–¥–∞ —Å —É—á–µ—Ç–æ–º –≤–ª–∏—è–Ω–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞
    const adjustedSpread = parseFloat(spread) - averageImpact;

    const fundingInfo = {
        fundingMEXC,
        fundingKUCOIN,
        averageFundingImpact: averageImpact,
        adjustedSpread: adjustedSpread
    };

    console.log('üìä Funding info:', fundingInfo);
    return fundingInfo;
}

module.exports = {
    runFundingAnalysis
};
*/