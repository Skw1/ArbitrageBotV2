// LBANK Parsing
const WebSocket = require('ws');
const axios = require('axios');
const path = require('path');
const zlib = require('zlib'); // –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ —Å–∂–∞—Ç—ã

// LBank Spot Order Book
async function getLBankSpotOrderBook(symbol) {
    try {
        const res = await axios.get(`https://api.lbkex.com/v2/depth.do`, {
            params: {
               // symbol: symbol.toLowerCase(),
                size: 5,
                depth: 60
            }
        });

        const data = res.data;
        if (data && Array.isArray(data.bids) && Array.isArray(data.asks)) {
            console.log('=== üìà LBank SPOT Order Book ===');
            console.log('Bids:', data.bids);
            console.log('Asks:', data.asks);
            return {
                bids: data.bids,
                asks: data.asks
            }
        } else {
            console.error('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç LBank Spot:', data);
        }
    } catch (err) {
        console.error('‚ùå LBank Spot –æ—à–∏–±–∫–∞:', err.response?.status, err.response?.data, err.message);
    }
}


function parseLBankFuturesMessage(rawData, ws) {
    try {
        const message = JSON.parse(rawData);

        if (message.depth && Array.isArray(message.depth.bids) && Array.isArray(message.depth.asks)) {
            console.log('=== üìà LBank FUTURES Order Book ===');
            console.log('Bids:', message.depth.bids);
            console.log('Asks:', message.depth.asks);
            return {
                bids: message.depth.bids,
                asks: message.depth.asks
            };
        } else if (message.ping) {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ action: "pong", pong: message.ping }));
            }
        }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è LBank Futures:', e.message);
    }

    return null;
}

// LBank Futures Order Book (WebSocket)
function connectLBankFuturesOrderBook(symbol) {
    return new Promise((resolve, reject) => {
        const ws = new WebSocket('wss://www.lbkex.net/ws/V2/');

        ws.on('open', () => {
            const subscribeMsg = {
                action: "subscribe",
                subscribe: "depth",
                pair: symbol,
                depth: "60",
                binary: true // —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å gzip, –Ω–æ –º—ã –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            };
            ws.send(JSON.stringify(subscribeMsg));
        });

        ws.on('message', (data) => {
            let raw;
            try {
                raw = Buffer.isBuffer(data) ? data.toString('utf-8') : data;
                const orderBook = parseLBankFuturesMessage(raw, ws);
                if (orderBook) {
                    resolve(orderBook);
                    ws.close();
                }
            } catch (e) {
                reject(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}`);
            }
        });

        ws.on('error', (err) => {
            reject(`WebSocket –æ—à–∏–±–∫–∞: ${err.message}`);
        });

        ws.on('close', () => {
            console.warn('‚ö†Ô∏è LBank Futures WebSocket –∑–∞–∫—Ä—ã—Ç.');
        });

        setTimeout(() => {
            reject('‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è LBank Futures Order Book');
            ws.close();
        }, 5000);
    });
}

module.exports = {
    getLBankSpotOrderBook,
    connectLBankFuturesOrderBook
};
